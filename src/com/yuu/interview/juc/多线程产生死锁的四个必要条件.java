package com.yuu.interview.juc;

/**
 * @author by Yuu
 * @Classname 多线程产生死锁的四个必要条件
 * @Date 2019/10/24 14:04
 * @see com.yuu.interview.juc
 */
public class 多线程产生死锁的四个必要条件 {
    public static void main(String[] args) {
        // 多线程产生死锁的四个必要条件
        // 1. 互斥条件：一个资源每次只能被一个线程使用
        // 2. 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放
        // 3. 不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺
        // 4. 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系

        // 如何避免死锁
        // 指定获得锁的顺序
        // 1. 比如某个线程只有获得 A 锁和 B 锁才能对某资源进行操作，在多线程条件下，如何避免死锁？
        // 2. 获得锁的顺序是一定的，比如规定，只有获得 A 锁的线程才有资格获取 B 锁，按顺序获取锁就可以避免死锁！
    }
}
